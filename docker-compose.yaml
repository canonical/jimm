services:
  traefik:
    image: "traefik:2.9"
    container_name: traefik
    profiles: ["dev", "test"]
    ports:
      - "80:80"
      - "443:443"
      - "8089:8080"
    volumes:
      - ./local/traefik/traefik.yaml:/etc/traefik/traefik.yaml
      - ./local/traefik/certs:/certs/
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: 
        - CMD
        - traefik
        - healthcheck
      interval: 10s
      timeout: 5s
      retries: 3
    
  # An instance of JIMM used in integration tests, pulled from a tag.
  jimm-test:
    image: ghcr.io/canonical/jimm:${JIMM_VERSION}
    profiles: ["test"]
    container_name: jimm-test
    ports:
      - 17070:80
    entrypoint:
      - bash
      - -c
      - >-
        apt update && apt install curl -y
        && set -a && . /test.env && . /vault/vault.env && set +a && /usr/local/bin/jimmsrv
    volumes:
      - ./local/vault/vault.env:/vault/vault.env:rw
      - ./test.env:/test.env
    healthcheck:
      test: [ "CMD", "curl", "http://jimm.localhost:80" ]
      interval: 5s
      timeout: 5s
      retries: 5 # Should fail after approximately (interval*retry) seconds
    depends_on:
      db:
        condition: service_healthy
      openfga:
        condition: service_healthy
      traefik:
        condition: service_healthy
      insert-hardcoded-auth-model:
        condition: service_completed_successfully
      keycloak:
        condition: service_healthy
    labels:
      traefik.enable: true
      traefik.http.routers.jimm.rule: Host(`jimm.localhost`)
      traefik.http.routers.jimm.entrypoints: websecure
      traefik.http.routers.jimm.tls: true

  # An instance of JIMM used for dev, built from source.
  jimm:
    image: cosmtrek/air:latest
    profiles: ["dev"]
    # working_dir value has to be the same of mapped volume
    hostname: jimm.localhost
    working_dir: /jimm
    container_name: jimm
    entrypoint:
      - bash
      - -c
      - >-
        go install github.com/go-delve/delve/cmd/dlv@latest
        && air
    ports:
      - 17070:80
      - 2345:2345
    volumes:
      - ./:/jimm/
      - ./local/vault/vault.env:/vault/vault.env:rw
    healthcheck:
      test: [ "CMD", "curl", "http://jimm.localhost:80" ]
      interval: 5s
      timeout: 5s
      retries: 50 # Should fail after approximately (interval*retry) seconds
    depends_on:
      db:
        condition: service_healthy
      openfga:
        condition: service_healthy
      traefik:
        condition: service_healthy
      insert-hardcoded-auth-model:
        condition: service_completed_successfully
      keycloak:
        condition: service_healthy
    labels:
      traefik.enable: true
      traefik.http.routers.jimm.rule: Host(`jimm.localhost`)
      traefik.http.routers.jimm.entrypoints: websecure
      traefik.http.routers.jimm.tls: true

  db:
    image: postgres
    container_name: postgres
    restart: always
    ports:
      - 5432:5432
    volumes:
      - ./local/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_DB: jimm
      POSTGRES_USER: jimm
      POSTGRES_PASSWORD: jimm
    # Since it's mainly used for testing purposes, it's okay to set fsync=off for
    # improved performance.
    command: -c fsync=off -c full_page_writes=off
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U jimm" ]
      interval: 5s
      timeout: 5s
      retries: 5

  vault:
    image: hashicorp/vault:latest
    container_name: vault
    ports:
      - 8200:8200
    environment:
      # For CLI
      VAULT_ADDR: "http://localhost:8200"
      # Dev Flag
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
      # Dev Flag
      VAULT_DEV_ROOT_TOKEN_ID: "token"
    cap_add:
      - IPC_LOCK
    volumes:
      - ./local/vault/vault.hcl:/vault/config/vault.hcl
      - ./local/vault/init.sh:/vault/init.sh
      - ./local/vault/policy.hcl:/vault/policy.hcl
      - ./local/vault/approle.json:/vault/approle.json
      - ./local/vault/roleid.txt:/vault/roleid.txt:rw
      - ./local/vault/vault.env:/vault/vault.env:rw
    command: /vault/init.sh
    depends_on:
      db:
        condition: service_healthy

  migrateopenfga:
    image: openfga/openfga:v1.2.0
    container_name: migrateopenfga
    command: migrate --datastore-engine postgres --datastore-uri 'postgresql://jimm:jimm@db/jimm?sslmode=disable'
    depends_on:
      db:
        condition: service_healthy

  insert-hardcoded-store:
    image: governmentpaas/psql
    container_name: insert-hardcoded-store
    command: psql -Atx postgresql://jimm:jimm@db/jimm?sslmode=disable -c "INSERT INTO store (id,name,created_at,updated_at) VALUES ('01GP1254CHWJC1MNGVB0WDG1T0','jimm',NOW(),NOW());"
    depends_on:
      migrateopenfga:
        condition: service_completed_successfully

  openfga:
    # We use our 'image' to mimic juju standard.
    # image: openfga/openfga:latest
    build:
      context: .
      dockerfile: ./local/openfga/Dockerfile
    container_name: openfga
    environment:
      OPENFGA_AUTHN_METHOD: "preshared"
      OPENFGA_AUTHN_PRESHARED_KEYS: "jimm"
      OPENFGA_DATASTORE_ENGINE: "postgres"
      OPENFGA_DATASTORE_URI: "postgresql://jimm:jimm@db/jimm?sslmode=disable"
    command: run
    ports:
      - 8080:8080
      - 3000:3000
    depends_on:
      migrateopenfga:
        condition: service_completed_successfully
      insert-hardcoded-store:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "http://0.0.0.0:8080/healthz" ]
      interval: 5s
      timeout: 5s
      retries: 10

  # Adds the auth model and updates its authorisation model id to be the expected hard-coded id such that our local JIMM can utilise it for queries.
  # The auth model json is retrieved from file via volume mount.
  insert-hardcoded-auth-model:
    profiles: ["dev", "test"]
    image: governmentpaas/psql
    container_name: insert-hardcoded-auth-model
    volumes:
      - ./local/openfga/authorisation_model.json:/authorisation_model.json
    command:
        - /bin/sh
        - -c
        - |
          wget -q -O - --header 'Content-Type: application/json' --header 'Authorization: Bearer jimm' --post-file authorisation_model.json openfga:8080/stores/01GP1254CHWJC1MNGVB0WDG1T0/authorization-models
          psql -Atx postgresql://jimm:jimm@db/jimm?sslmode=disable -c "UPDATE authorization_model SET authorization_model_id = '01GP1EC038KHGB6JJ2XXXXCXKB' WHERE store = '01GP1254CHWJC1MNGVB0WDG1T0';"
    depends_on:
      openfga:
        condition: service_healthy

  keycloak:
    image: docker.io/bitnami/keycloak:23
    container_name: keycloak
    hostname: keycloak.localhost
    environment:
      KEYCLOAK_HTTP_PORT: 8082
      KEYCLOAK_ENABLE_HEALTH_ENDPOINTS: true
      KEYCLOAK_CREATE_ADMIN_USER: true
      KEYCLOAK_ADMIN_USER: jimm
      KEYCLOAK_ADMIN_PASSWORD: jimm
      KEYCLOAK_DATABASE_VENDOR: dev-file
      KEYCLOAK_EXTRA_ARGS: "-Dkeycloak.migration.action=import -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=/bitnami/keycloak/data/import/realm.json -Dkeycloak.migration.replace-placeholders=true -Dkeycloak.profile.feature.upload_scripts=enabled"
    volumes:
      - ./local/keycloak/jimm-realm.json:/bitnami/keycloak/data/import/realm.json:ro
    ports:
      - "8082:8082"
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8082/health/ready" ]
      interval: 5s
      timeout: 10s
      retries: 30
