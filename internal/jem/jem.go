// Copyright 2015 Canonical Ltd.

package jem

import (
	"context"
	"math/rand"
	"sort"
	"sync"
	"time"

	"github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery/identchecker"
	vault "github.com/hashicorp/vault/api"
	"github.com/juju/clock"
	"github.com/juju/juju/api"
	jujuparams "github.com/juju/juju/apiserver/params"
	jujucloud "github.com/juju/juju/cloud"
	"github.com/juju/mgo/v2"
	"github.com/juju/names/v4"
	"github.com/juju/utils/v2/cache"
	"github.com/juju/version/v2"
	"github.com/rogpeppe/fastuuid"
	"go.uber.org/zap"
	"gopkg.in/errgo.v1"

	"github.com/canonical/jimm/internal/apiconn"
	"github.com/canonical/jimm/internal/auth"
	"github.com/canonical/jimm/internal/conv"
	"github.com/canonical/jimm/internal/jem/jimmdb"
	"github.com/canonical/jimm/internal/mgosession"
	"github.com/canonical/jimm/internal/mongodoc"
	"github.com/canonical/jimm/internal/pubsub"
	"github.com/canonical/jimm/internal/zapctx"
	"github.com/canonical/jimm/internal/zaputil"
	"github.com/canonical/jimm/params"
)

// wallClock provides access to the current time. It is a variable so
// that it can be overridden in tests.
var wallClock clock.Clock = clock.WallClock

// Functions defined as variables so they can be overridden in tests.
var (
	randIntn = rand.Intn

	// ModelSummaryWatcherNotSupportedError is returned by WatchAllModelSummaries if
	// the controller does not support this functionality
	ModelSummaryWatcherNotSupportedError = errgo.New("model summary watcher not supported by the controller")
)

// Params holds parameters for the NewPool function.
type Params struct {
	// DB holds the mongo database that will be used to
	// store the JEM information.
	DB *mgo.Database

	// SessionPool holds a pool from which session objects are
	// taken to be used in database operations.
	SessionPool *mgosession.Pool

	// ControllerAdmin holds the identity of the users or groups that
	// are allowed to create controllers.
	ControllerAdmins []params.User

	// PublicCloudMetadata contains the metadata details of all known
	// public clouds.
	PublicCloudMetadata map[string]jujucloud.Cloud

	Pubsub *pubsub.Hub

	// VaultClient is the client for a vault server that is used to store
	// secrets.
	VaultClient *vault.Client

	// VaultPath is the root path in the vault for JIMM's secrets.
	VaultPath string
}

type Pool struct {
	config    Params
	connCache *apiconn.Cache

	// dbName holds the name of the database to use.
	dbName string

	// regionCache caches region information about models
	regionCache *cache.Cache

	// mu guards the fields below it.
	mu sync.Mutex

	// closed holds whether the Pool has been closed.
	closed bool

	// refCount holds the number of JEM instances that
	// currently refer to the pool. The pool is finally
	// closed when all JEM instances are closed and the
	// pool itself has been closed.
	refCount int

	// uuidGenerator is used to generate temporary UUIDs during the
	// creation of models, these UUIDs will be replaced with the ones
	// generated by the controllers themselves.
	uuidGenerator *fastuuid.Generator

	pubsub *pubsub.Hub
}

var APIOpenTimeout = 15 * time.Second

// NewPool represents a pool of possible JEM instances that use the given
// database as a store, and use the given bakery parameters to create the
// bakery.Service.
func NewPool(ctx context.Context, p Params) (*Pool, error) {
	// TODO migrate database
	if len(p.ControllerAdmins) == 0 {
		return nil, errgo.Newf("no controller admin groups specified")
	}
	if p.SessionPool == nil {
		return nil, errgo.Newf("no session pool provided")
	}
	uuidGen, err := fastuuid.NewGenerator()
	if err != nil {
		return nil, errgo.Mask(err)
	}
	pool := &Pool{
		config:        p,
		dbName:        p.DB.Name,
		connCache:     apiconn.NewCache(apiconn.CacheParams{}),
		regionCache:   cache.New(24 * time.Hour),
		refCount:      1,
		uuidGenerator: uuidGen,
		pubsub:        p.Pubsub,
	}
	jem := pool.JEM(ctx)
	defer jem.Close()
	if err := jem.DB.EnsureIndexes(); err != nil {
		return nil, errgo.Notef(err, "cannot ensure indexes")
	}
	return pool, nil
}

// Close closes the pool. Its resources will be freed
// when the last JEM instance created from the pool has
// been closed.
func (p *Pool) Close() {
	p.mu.Lock()
	defer p.mu.Unlock()
	if p.closed {
		return
	}
	p.decRef()
	p.closed = true
}

func (p *Pool) decRef() {
	// called with p.mu held.
	if p.refCount--; p.refCount == 0 {
		p.connCache.Close()
	}
	if p.refCount < 0 {
		panic("negative reference count")
	}
}

// ClearAPIConnCache clears out the API connection cache.
// This is useful for testing purposes.
func (p *Pool) ClearAPIConnCache() {
	p.connCache.EvictAll()
}

// JEM returns a new JEM instance from the pool, suitable
// for using in short-lived requests. The JEM must be
// closed with the Close method after use.
//
// This method will panic if called after the pool has been
// closed.
func (p *Pool) JEM(ctx context.Context) *JEM {
	p.mu.Lock()
	defer p.mu.Unlock()
	if p.closed {
		panic("JEM call on closed pool")
	}
	p.refCount++
	return &JEM{
		DB:     jimmdb.NewDatabase(ctx, p.config.SessionPool, p.dbName),
		pool:   p,
		pubsub: p.pubsub,
	}
}

type JEM struct {
	// DB holds the mongodb-backed identity store.
	DB *jimmdb.Database

	// pool holds the Pool from which the JEM instance
	// was created.
	pool *Pool

	// closed records whether the JEM instance has
	// been closed.
	closed bool

	pubsub *pubsub.Hub
}

// Clone returns an independent copy of the receiver
// that uses a cloned database connection. The
// returned value must be closed after use.
func (j *JEM) Clone() *JEM {
	j.pool.mu.Lock()
	defer j.pool.mu.Unlock()

	j.pool.refCount++
	return &JEM{
		DB:   j.DB.Clone(),
		pool: j.pool,
	}
}

func (j *JEM) ControllerAdmins() []string {
	admins := make([]string, len(j.pool.config.ControllerAdmins))
	for i, v := range j.pool.config.ControllerAdmins {
		admins[i] = string(v)
	}
	return admins
}

// Close closes the JEM instance. This should be called when
// the JEM instance is finished with.
func (j *JEM) Close() {
	j.pool.mu.Lock()
	defer j.pool.mu.Unlock()
	if j.closed {
		return
	}
	j.closed = true
	j.DB.Session.Close()
	j.DB = nil
	j.pool.decRef()
}

// Pubsub returns jem's pubsub hub.
func (j *JEM) Pubsub() *pubsub.Hub {
	return j.pubsub
}

// ErrAPIConnection is returned by OpenAPI, OpenAPIFromDoc and
// OpenModelAPI when the API connection cannot be made.
//
// Note that it is defined as an ErrorCode so that Database.checkError
// does not treat it as a mongo-connection-broken error.
var ErrAPIConnection params.ErrorCode = "cannot connect to API"

// OpenAPI opens an API connection to the controller with the given path
// and returns it along with the information used to connect. If the
// controller does not exist, the error will have a cause of
// params.ErrNotFound.
//
// If the controller API connection could not be made, the error will
// have a cause of ErrAPIConnection.
//
// The returned connection must be closed when finished with.
func (j *JEM) OpenAPI(ctx context.Context, path params.EntityPath) (*apiconn.Conn, error) {
	ctl := mongodoc.Controller{Path: path}
	if err := j.DB.GetController(ctx, &ctl); err != nil {
		return nil, errgo.NoteMask(err, "cannot get controller", errgo.Is(params.ErrNotFound))
	}
	return j.OpenAPIFromDoc(ctx, &ctl)
}

// OpenAPIFromDoc returns an API connection to the controller held in the
// given document. This can be useful when we want to connect to a
// controller before it's added to the database. Note that a successful
// return from this function does not necessarily mean that the
// credentials or API addresses in the docs actually work, as it's
// possible that there's already a cached connection for the given
// controller.
//
// The returned connection must be closed when finished with.
func (j *JEM) OpenAPIFromDoc(ctx context.Context, ctl *mongodoc.Controller) (*apiconn.Conn, error) {
	return j.pool.connCache.OpenAPI(ctx, ctl.UUID, func() (api.Connection, *api.Info, error) {
		info := apiInfoFromDoc(ctl)
		zapctx.Debug(ctx, "open API", zap.Any("api-info", info))
		conn, err := api.Open(info, apiDialOpts())
		if err != nil {
			return nil, nil, errgo.WithCausef(err, ErrAPIConnection, "")
		}
		return conn, info, nil
	})
}

func apiDialOpts() api.DialOpts {
	return api.DialOpts{
		Timeout:    APIOpenTimeout,
		RetryDelay: 500 * time.Millisecond,
	}
}

func apiInfoFromDoc(ctl *mongodoc.Controller) *api.Info {
	return &api.Info{
		Addrs:    mongodoc.Addresses(ctl.HostPorts),
		CACert:   ctl.CACert,
		Tag:      names.NewUserTag(ctl.AdminUser),
		Password: ctl.AdminPassword,
	}
}

// OpenModelAPI opens an API connection to the model with the given path
// and returns it along with the information used to connect. If the
// model does not exist, the error will have a cause of
// params.ErrNotFound.
//
// If the model API connection could not be made, the error will have a
// cause of ErrAPIConnection.
//
// The returned connection must be closed when finished with.
func (j *JEM) OpenModelAPI(ctx context.Context, path params.EntityPath) (*apiconn.Conn, error) {
	m := mongodoc.Model{Path: path}
	if err := j.DB.GetModel(ctx, &m); err != nil {
		return nil, errgo.NoteMask(err, "cannot get model", errgo.Is(params.ErrNotFound))
	}
	ctl := mongodoc.Controller{Path: m.Controller}
	if err := j.DB.GetController(ctx, &ctl); err != nil {
		return nil, errgo.Notef(err, "cannot get controller")
	}
	return j.openModelAPIFromDocs(ctx, &ctl, &m)
}

// openModelAPIFromDocs returns an API connection to the model held in the
// given documents.
//
// The returned connection must be closed when finished with.
func (j *JEM) openModelAPIFromDocs(ctx context.Context, ctl *mongodoc.Controller, m *mongodoc.Model) (*apiconn.Conn, error) {
	return j.pool.connCache.OpenAPI(ctx, m.UUID, func() (api.Connection, *api.Info, error) {
		info := apiInfoFromDocs(ctl, m)
		zapctx.Debug(ctx, "open API", zap.Any("api-info", info))
		conn, err := api.Open(info, apiDialOpts())
		if err != nil {
			zapctx.Info(ctx, "failed to open connection", zaputil.Error(err), zap.Any("api-info", info))
			return nil, nil, errgo.WithCausef(err, ErrAPIConnection, "")
		}
		return conn, info, nil
	})
}

func apiInfoFromDocs(ctl *mongodoc.Controller, m *mongodoc.Model) *api.Info {
	return &api.Info{
		Addrs:    mongodoc.Addresses(ctl.HostPorts),
		CACert:   ctl.CACert,
		ModelTag: names.NewModelTag(m.UUID),
		Tag:      names.NewUserTag(ctl.AdminUser),
		Password: ctl.AdminPassword,
	}
}

func (j *JEM) possibleControllers(ctx context.Context, id identchecker.ACLIdentity, ctlPath params.EntityPath, cr *mongodoc.CloudRegion) ([]params.EntityPath, error) {
	if ctlPath.Name != "" {
		return []params.EntityPath{ctlPath}, nil
	}
	if err := j.DB.GetCloudRegion(ctx, cr); err != nil {
		return nil, errgo.Mask(err, errgo.Is(params.ErrNotFound))
	}
	if err := auth.CheckCanRead(ctx, id, cr); err != nil {
		return nil, errgo.Mask(err, errgo.Is(params.ErrUnauthorized))
	}
	shuffle(len(cr.PrimaryControllers), func(i, j int) {
		cr.PrimaryControllers[i], cr.PrimaryControllers[j] = cr.PrimaryControllers[j], cr.PrimaryControllers[i]
	})
	shuffle(len(cr.SecondaryControllers), func(i, j int) {
		cr.SecondaryControllers[i], cr.SecondaryControllers[j] = cr.SecondaryControllers[j], cr.SecondaryControllers[i]
	})
	return append(cr.PrimaryControllers, cr.SecondaryControllers...), nil
}

// shuffle is used to randomize the order in which possible controllers
// are tried. It is a variable so it can be replaced in tests.
var shuffle func(int, func(int, int)) = rand.Shuffle

// EarliestControllerVersion returns the earliest agent version
// that any of the available public controllers is known to be running.
// If there are no available controllers or none of their versions are
// known, it returns the zero version.
func (j *JEM) EarliestControllerVersion(ctx context.Context, id identchecker.ACLIdentity) (version.Number, error) {
	// TOD(rog) cache the result of this for a while, as it changes only rarely
	// and we don't really need to make this extra round trip every
	// time a user connects to the API?
	var v *version.Number
	err := j.DB.ForEachController(ctx, jimmdb.NotExists("unavailablesince"), nil, func(c *mongodoc.Controller) error {
		ctx := zapctx.WithFields(ctx, zap.Stringer("controller", c.Path))
		if !c.Public {
			if err := auth.CheckCanRead(ctx, id, c); err != nil {
				if errgo.Cause(err) != params.ErrUnauthorized {
					zapctx.Warn(ctx, "cannot check read access", zap.Error(err))
				}
				return nil
			}
		}
		zapctx.Debug(ctx, "EarliestControllerVersion", zap.Stringer("version", c.Version))
		if c.Version == nil {
			return nil
		}
		if v == nil || c.Version.Compare(*v) < 0 {
			v = c.Version
		}
		return nil
	})
	if err != nil || v == nil {
		return version.Number{}, errgo.Mask(err)
	}
	return *v, nil
}

func (j *JEM) MongoVersion(ctx context.Context) (jujuparams.StringResult, error) {
	result := jujuparams.StringResult{}
	binfo, err := j.pool.config.DB.Session.BuildInfo()
	if err != nil {
		return result, errgo.Mask(err)
	}
	result.Result = binfo.Version
	return result, nil
}

func plural(n int) string {
	if n == 1 {
		return ""
	}
	return "s"
}

// WatchAllModelSummaries starts watching the summary updates from
// the controller.
func (j *JEM) WatchAllModelSummaries(ctx context.Context, ctlPath params.EntityPath) (func() error, error) {
	conn, err := j.OpenAPI(ctx, ctlPath)
	if err != nil {
		return nil, errgo.Mask(err)
	}

	if !conn.SupportsModelSummaryWatcher() {
		return nil, ModelSummaryWatcherNotSupportedError
	}
	id, err := conn.WatchAllModelSummaries(ctx)
	if err != nil {
		errgo.Mask(err, apiconn.IsAPIError)
	}
	watcher := &modelSummaryWatcher{
		conn:    conn,
		id:      id,
		pubsub:  j.pubsub,
		cleanup: conn.Close,
	}
	go watcher.loop(ctx)
	return watcher.stop, nil
}

type modelSummaryWatcher struct {
	conn    *apiconn.Conn
	id      string
	pubsub  *pubsub.Hub
	cleanup func() error
}

func (w *modelSummaryWatcher) next(ctx context.Context) ([]jujuparams.ModelAbstract, error) {
	models, err := w.conn.ModelSummaryWatcherNext(ctx, w.id)
	if err != nil {
		return nil, errgo.Mask(err, apiconn.IsAPIError)
	}
	sort.Slice(models, func(i, j int) bool {
		return models[i].UUID < models[j].UUID
	})
	// Sanitize the model abstracts.
	for i, m := range models {
		admins := make([]string, 0, len(m.Admins))
		for _, admin := range m.Admins {
			if _, err := conv.FromUserTag(names.NewUserTag(admin)); err != nil {
				// skip any admins that aren't valid external users.
				continue
			}
			admins = append(admins, admin)
		}
		models[i].Admins = admins
	}
	return models, nil
}

func (w *modelSummaryWatcher) loop(ctx context.Context) {
	defer func() {
		if err := w.cleanup(); err != nil {
			zapctx.Error(ctx, "cleanup failed", zaputil.Error(err))
		}
	}()

	for {
		select {
		case <-ctx.Done():
			return
		default:
		}
		modelSummaries, err := w.next(ctx)
		if err != nil {
			zapctx.Error(ctx, "failed to get next model summary", zaputil.Error(err))
			return
		}
		for _, modelSummary := range modelSummaries {
			w.pubsub.Publish(modelSummary.UUID, modelSummary)
		}
	}
}

func (w *modelSummaryWatcher) stop() error {
	return errgo.Mask(w.conn.ModelSummaryWatcherStop(context.TODO(), w.id), apiconn.IsAPIError)
}
