// Code generated by MockGen. DO NOT EDIT.
// Source: jimm.go

// Package jimm_test is a generated GoMock package.
package jimm_test

import (
	context "context"
	reflect "reflect"
	time "time"

	dbmodel "github.com/CanonicalLtd/jimm/internal/dbmodel"
	jimm "github.com/CanonicalLtd/jimm/internal/jimm"
	openfga "github.com/CanonicalLtd/jimm/internal/openfga"
	names "github.com/CanonicalLtd/jimm/pkg/names"
	bakery "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery"
	gomock "github.com/golang/mock/gomock"
	crossmodel "github.com/juju/juju/core/crossmodel"
	params "github.com/juju/juju/rpc/params"
	v4 "github.com/juju/names/v4"
)

// MockReBACClient is a mock of ReBACClient interface.
type MockReBACClient struct {
	ctrl     *gomock.Controller
	recorder *MockReBACClientMockRecorder
}

// MockReBACClientMockRecorder is the mock recorder for MockReBACClient.
type MockReBACClientMockRecorder struct {
	mock *MockReBACClient
}

// NewMockReBACClient creates a new mock instance.
func NewMockReBACClient(ctrl *gomock.Controller) *MockReBACClient {
	mock := &MockReBACClient{ctrl: ctrl}
	mock.recorder = &MockReBACClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReBACClient) EXPECT() *MockReBACClientMockRecorder {
	return m.recorder
}

// AddControllerApplicationOffer mocks base method.
func (m *MockReBACClient) AddControllerApplicationOffer(ctx context.Context, controller v4.ControllerTag, offer v4.ApplicationOfferTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddControllerApplicationOffer", ctx, controller, offer)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddControllerApplicationOffer indicates an expected call of AddControllerApplicationOffer.
func (mr *MockReBACClientMockRecorder) AddControllerApplicationOffer(ctx, controller, offer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddControllerApplicationOffer", reflect.TypeOf((*MockReBACClient)(nil).AddControllerApplicationOffer), ctx, controller, offer)
}

// AddControllerModel mocks base method.
func (m *MockReBACClient) AddControllerModel(ctx context.Context, controller v4.ControllerTag, model v4.ModelTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddControllerModel", ctx, controller, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddControllerModel indicates an expected call of AddControllerModel.
func (mr *MockReBACClientMockRecorder) AddControllerModel(ctx, controller, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddControllerModel", reflect.TypeOf((*MockReBACClient)(nil).AddControllerModel), ctx, controller, model)
}

// AddRelations mocks base method.
func (m *MockReBACClient) AddRelations(ctx context.Context, keys ...openfga.Tuple) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRelations", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRelations indicates an expected call of AddRelations.
func (mr *MockReBACClientMockRecorder) AddRelations(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelations", reflect.TypeOf((*MockReBACClient)(nil).AddRelations), varargs...)
}

// CheckRelation mocks base method.
func (m *MockReBACClient) CheckRelation(ctx context.Context, key openfga.Tuple, trace bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRelation", ctx, key, trace)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckRelation indicates an expected call of CheckRelation.
func (mr *MockReBACClientMockRecorder) CheckRelation(ctx, key, trace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRelation", reflect.TypeOf((*MockReBACClient)(nil).CheckRelation), ctx, key, trace)
}

// ReadRelatedObjects mocks base method.
func (m *MockReBACClient) ReadRelatedObjects(ctx context.Context, key *openfga.Tuple, pageSize int32, paginationToken string) (*openfga.ReadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRelatedObjects", ctx, key, pageSize, paginationToken)
	ret0, _ := ret[0].(*openfga.ReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRelatedObjects indicates an expected call of ReadRelatedObjects.
func (mr *MockReBACClientMockRecorder) ReadRelatedObjects(ctx, key, pageSize, paginationToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRelatedObjects", reflect.TypeOf((*MockReBACClient)(nil).ReadRelatedObjects), ctx, key, pageSize, paginationToken)
}

// RemoveApplicationOffer mocks base method.
func (m *MockReBACClient) RemoveApplicationOffer(ctx context.Context, offer v4.ApplicationOfferTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveApplicationOffer", ctx, offer)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveApplicationOffer indicates an expected call of RemoveApplicationOffer.
func (mr *MockReBACClientMockRecorder) RemoveApplicationOffer(ctx, offer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveApplicationOffer", reflect.TypeOf((*MockReBACClient)(nil).RemoveApplicationOffer), ctx, offer)
}

// RemoveGroup mocks base method.
func (m *MockReBACClient) RemoveGroup(ctx context.Context, group names.GroupTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGroup", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGroup indicates an expected call of RemoveGroup.
func (mr *MockReBACClientMockRecorder) RemoveGroup(ctx, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroup", reflect.TypeOf((*MockReBACClient)(nil).RemoveGroup), ctx, group)
}

// RemoveModel mocks base method.
func (m *MockReBACClient) RemoveModel(ctx context.Context, model v4.ModelTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveModel", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveModel indicates an expected call of RemoveModel.
func (mr *MockReBACClientMockRecorder) RemoveModel(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveModel", reflect.TypeOf((*MockReBACClient)(nil).RemoveModel), ctx, model)
}

// RemoveRelation mocks base method.
func (m *MockReBACClient) RemoveRelation(ctx context.Context, keys ...openfga.Tuple) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveRelation", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRelation indicates an expected call of RemoveRelation.
func (mr *MockReBACClientMockRecorder) RemoveRelation(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRelation", reflect.TypeOf((*MockReBACClient)(nil).RemoveRelation), varargs...)
}

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticator) Authenticate(ctx context.Context, req *params.LoginRequest) (*dbmodel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, req)
	ret0, _ := ret[0].(*dbmodel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticatorMockRecorder) Authenticate(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticator)(nil).Authenticate), ctx, req)
}

// MockDialer is a mock of Dialer interface.
type MockDialer struct {
	ctrl     *gomock.Controller
	recorder *MockDialerMockRecorder
}

// MockDialerMockRecorder is the mock recorder for MockDialer.
type MockDialerMockRecorder struct {
	mock *MockDialer
}

// NewMockDialer creates a new mock instance.
func NewMockDialer(ctrl *gomock.Controller) *MockDialer {
	mock := &MockDialer{ctrl: ctrl}
	mock.recorder = &MockDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDialer) EXPECT() *MockDialerMockRecorder {
	return m.recorder
}

// Dial mocks base method.
func (m *MockDialer) Dial(ctx context.Context, ctl *dbmodel.Controller, modelTag v4.ModelTag) (jimm.API, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", ctx, ctl, modelTag)
	ret0, _ := ret[0].(jimm.API)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockDialerMockRecorder) Dial(ctx, ctl, modelTag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockDialer)(nil).Dial), ctx, ctl, modelTag)
}

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// AddCloud mocks base method.
func (m *MockAPI) AddCloud(arg0 context.Context, arg1 v4.CloudTag, arg2 params.Cloud) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCloud", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCloud indicates an expected call of AddCloud.
func (mr *MockAPIMockRecorder) AddCloud(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCloud", reflect.TypeOf((*MockAPI)(nil).AddCloud), arg0, arg1, arg2)
}

// AllModelWatcherNext mocks base method.
func (m *MockAPI) AllModelWatcherNext(arg0 context.Context, arg1 string) ([]params.Delta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllModelWatcherNext", arg0, arg1)
	ret0, _ := ret[0].([]params.Delta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllModelWatcherNext indicates an expected call of AllModelWatcherNext.
func (mr *MockAPIMockRecorder) AllModelWatcherNext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllModelWatcherNext", reflect.TypeOf((*MockAPI)(nil).AllModelWatcherNext), arg0, arg1)
}

// AllModelWatcherStop mocks base method.
func (m *MockAPI) AllModelWatcherStop(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllModelWatcherStop", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllModelWatcherStop indicates an expected call of AllModelWatcherStop.
func (mr *MockAPIMockRecorder) AllModelWatcherStop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllModelWatcherStop", reflect.TypeOf((*MockAPI)(nil).AllModelWatcherStop), arg0, arg1)
}

// ChangeModelCredential mocks base method.
func (m *MockAPI) ChangeModelCredential(arg0 context.Context, arg1 v4.ModelTag, arg2 v4.CloudCredentialTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeModelCredential", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeModelCredential indicates an expected call of ChangeModelCredential.
func (mr *MockAPIMockRecorder) ChangeModelCredential(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeModelCredential", reflect.TypeOf((*MockAPI)(nil).ChangeModelCredential), arg0, arg1, arg2)
}

// CheckCredentialModels mocks base method.
func (m *MockAPI) CheckCredentialModels(arg0 context.Context, arg1 params.TaggedCredential) ([]params.UpdateCredentialModelResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCredentialModels", arg0, arg1)
	ret0, _ := ret[0].([]params.UpdateCredentialModelResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCredentialModels indicates an expected call of CheckCredentialModels.
func (mr *MockAPIMockRecorder) CheckCredentialModels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCredentialModels", reflect.TypeOf((*MockAPI)(nil).CheckCredentialModels), arg0, arg1)
}

// Close mocks base method.
func (m *MockAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAPI)(nil).Close))
}

// Cloud mocks base method.
func (m *MockAPI) Cloud(arg0 context.Context, arg1 v4.CloudTag, arg2 *params.Cloud) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cloud indicates an expected call of Cloud.
func (mr *MockAPIMockRecorder) Cloud(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockAPI)(nil).Cloud), arg0, arg1, arg2)
}

// CloudInfo mocks base method.
func (m *MockAPI) CloudInfo(arg0 context.Context, arg1 v4.CloudTag, arg2 *params.CloudInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloudInfo indicates an expected call of CloudInfo.
func (mr *MockAPIMockRecorder) CloudInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudInfo", reflect.TypeOf((*MockAPI)(nil).CloudInfo), arg0, arg1, arg2)
}

// Clouds mocks base method.
func (m *MockAPI) Clouds(arg0 context.Context) (map[v4.CloudTag]params.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clouds", arg0)
	ret0, _ := ret[0].(map[v4.CloudTag]params.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clouds indicates an expected call of Clouds.
func (mr *MockAPIMockRecorder) Clouds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clouds", reflect.TypeOf((*MockAPI)(nil).Clouds), arg0)
}

// ControllerModelSummary mocks base method.
func (m *MockAPI) ControllerModelSummary(arg0 context.Context, arg1 *params.ModelSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerModelSummary", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ControllerModelSummary indicates an expected call of ControllerModelSummary.
func (mr *MockAPIMockRecorder) ControllerModelSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerModelSummary", reflect.TypeOf((*MockAPI)(nil).ControllerModelSummary), arg0, arg1)
}

// CreateModel mocks base method.
func (m *MockAPI) CreateModel(arg0 context.Context, arg1 *params.ModelCreateArgs, arg2 *params.ModelInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockAPIMockRecorder) CreateModel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockAPI)(nil).CreateModel), arg0, arg1, arg2)
}

// DestroyApplicationOffer mocks base method.
func (m *MockAPI) DestroyApplicationOffer(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyApplicationOffer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyApplicationOffer indicates an expected call of DestroyApplicationOffer.
func (mr *MockAPIMockRecorder) DestroyApplicationOffer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyApplicationOffer", reflect.TypeOf((*MockAPI)(nil).DestroyApplicationOffer), arg0, arg1, arg2)
}

// DestroyModel mocks base method.
func (m *MockAPI) DestroyModel(arg0 context.Context, arg1 v4.ModelTag, arg2, arg3 *bool, arg4, arg5 *time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyModel", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyModel indicates an expected call of DestroyModel.
func (mr *MockAPIMockRecorder) DestroyModel(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyModel", reflect.TypeOf((*MockAPI)(nil).DestroyModel), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DumpModel mocks base method.
func (m *MockAPI) DumpModel(arg0 context.Context, arg1 v4.ModelTag, arg2 bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpModel", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpModel indicates an expected call of DumpModel.
func (mr *MockAPIMockRecorder) DumpModel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpModel", reflect.TypeOf((*MockAPI)(nil).DumpModel), arg0, arg1, arg2)
}

// DumpModelDB mocks base method.
func (m *MockAPI) DumpModelDB(arg0 context.Context, arg1 v4.ModelTag) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpModelDB", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpModelDB indicates an expected call of DumpModelDB.
func (mr *MockAPIMockRecorder) DumpModelDB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpModelDB", reflect.TypeOf((*MockAPI)(nil).DumpModelDB), arg0, arg1)
}

// FindApplicationOffers mocks base method.
func (m *MockAPI) FindApplicationOffers(arg0 context.Context, arg1 []params.OfferFilter) ([]params.ApplicationOfferAdminDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindApplicationOffers", arg0, arg1)
	ret0, _ := ret[0].([]params.ApplicationOfferAdminDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindApplicationOffers indicates an expected call of FindApplicationOffers.
func (mr *MockAPIMockRecorder) FindApplicationOffers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindApplicationOffers", reflect.TypeOf((*MockAPI)(nil).FindApplicationOffers), arg0, arg1)
}

// GetApplicationOffer mocks base method.
func (m *MockAPI) GetApplicationOffer(arg0 context.Context, arg1 *params.ApplicationOfferAdminDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationOffer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetApplicationOffer indicates an expected call of GetApplicationOffer.
func (mr *MockAPIMockRecorder) GetApplicationOffer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationOffer", reflect.TypeOf((*MockAPI)(nil).GetApplicationOffer), arg0, arg1)
}

// GetApplicationOfferConsumeDetails mocks base method.
func (m *MockAPI) GetApplicationOfferConsumeDetails(arg0 context.Context, arg1 v4.UserTag, arg2 *params.ConsumeOfferDetails, arg3 bakery.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationOfferConsumeDetails", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetApplicationOfferConsumeDetails indicates an expected call of GetApplicationOfferConsumeDetails.
func (mr *MockAPIMockRecorder) GetApplicationOfferConsumeDetails(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationOfferConsumeDetails", reflect.TypeOf((*MockAPI)(nil).GetApplicationOfferConsumeDetails), arg0, arg1, arg2, arg3)
}

// GrantApplicationOfferAccess mocks base method.
func (m *MockAPI) GrantApplicationOfferAccess(arg0 context.Context, arg1 string, arg2 v4.UserTag, arg3 params.OfferAccessPermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantApplicationOfferAccess", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantApplicationOfferAccess indicates an expected call of GrantApplicationOfferAccess.
func (mr *MockAPIMockRecorder) GrantApplicationOfferAccess(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantApplicationOfferAccess", reflect.TypeOf((*MockAPI)(nil).GrantApplicationOfferAccess), arg0, arg1, arg2, arg3)
}

// GrantCloudAccess mocks base method.
func (m *MockAPI) GrantCloudAccess(arg0 context.Context, arg1 v4.CloudTag, arg2 v4.UserTag, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantCloudAccess", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantCloudAccess indicates an expected call of GrantCloudAccess.
func (mr *MockAPIMockRecorder) GrantCloudAccess(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantCloudAccess", reflect.TypeOf((*MockAPI)(nil).GrantCloudAccess), arg0, arg1, arg2, arg3)
}

// GrantJIMMModelAdmin mocks base method.
func (m *MockAPI) GrantJIMMModelAdmin(arg0 context.Context, arg1 v4.ModelTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantJIMMModelAdmin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantJIMMModelAdmin indicates an expected call of GrantJIMMModelAdmin.
func (mr *MockAPIMockRecorder) GrantJIMMModelAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantJIMMModelAdmin", reflect.TypeOf((*MockAPI)(nil).GrantJIMMModelAdmin), arg0, arg1)
}

// GrantModelAccess mocks base method.
func (m *MockAPI) GrantModelAccess(arg0 context.Context, arg1 v4.ModelTag, arg2 v4.UserTag, arg3 params.UserAccessPermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantModelAccess", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantModelAccess indicates an expected call of GrantModelAccess.
func (mr *MockAPIMockRecorder) GrantModelAccess(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantModelAccess", reflect.TypeOf((*MockAPI)(nil).GrantModelAccess), arg0, arg1, arg2, arg3)
}

// IsBroken mocks base method.
func (m *MockAPI) IsBroken() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBroken")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBroken indicates an expected call of IsBroken.
func (mr *MockAPIMockRecorder) IsBroken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBroken", reflect.TypeOf((*MockAPI)(nil).IsBroken))
}

// ListApplicationOffers mocks base method.
func (m *MockAPI) ListApplicationOffers(arg0 context.Context, arg1 []params.OfferFilter) ([]params.ApplicationOfferAdminDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationOffers", arg0, arg1)
	ret0, _ := ret[0].([]params.ApplicationOfferAdminDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationOffers indicates an expected call of ListApplicationOffers.
func (mr *MockAPIMockRecorder) ListApplicationOffers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationOffers", reflect.TypeOf((*MockAPI)(nil).ListApplicationOffers), arg0, arg1)
}

// ModelInfo mocks base method.
func (m *MockAPI) ModelInfo(arg0 context.Context, arg1 *params.ModelInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModelInfo indicates an expected call of ModelInfo.
func (mr *MockAPIMockRecorder) ModelInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInfo", reflect.TypeOf((*MockAPI)(nil).ModelInfo), arg0, arg1)
}

// ModelStatus mocks base method.
func (m *MockAPI) ModelStatus(arg0 context.Context, arg1 *params.ModelStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModelStatus indicates an expected call of ModelStatus.
func (mr *MockAPIMockRecorder) ModelStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelStatus", reflect.TypeOf((*MockAPI)(nil).ModelStatus), arg0, arg1)
}

// ModelSummaryWatcherNext mocks base method.
func (m *MockAPI) ModelSummaryWatcherNext(arg0 context.Context, arg1 string) ([]params.ModelAbstract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelSummaryWatcherNext", arg0, arg1)
	ret0, _ := ret[0].([]params.ModelAbstract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelSummaryWatcherNext indicates an expected call of ModelSummaryWatcherNext.
func (mr *MockAPIMockRecorder) ModelSummaryWatcherNext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelSummaryWatcherNext", reflect.TypeOf((*MockAPI)(nil).ModelSummaryWatcherNext), arg0, arg1)
}

// ModelSummaryWatcherStop mocks base method.
func (m *MockAPI) ModelSummaryWatcherStop(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelSummaryWatcherStop", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModelSummaryWatcherStop indicates an expected call of ModelSummaryWatcherStop.
func (mr *MockAPIMockRecorder) ModelSummaryWatcherStop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelSummaryWatcherStop", reflect.TypeOf((*MockAPI)(nil).ModelSummaryWatcherStop), arg0, arg1)
}

// ModelWatcherNext mocks base method.
func (m *MockAPI) ModelWatcherNext(ctx context.Context, id string) ([]params.Delta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelWatcherNext", ctx, id)
	ret0, _ := ret[0].([]params.Delta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelWatcherNext indicates an expected call of ModelWatcherNext.
func (mr *MockAPIMockRecorder) ModelWatcherNext(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelWatcherNext", reflect.TypeOf((*MockAPI)(nil).ModelWatcherNext), ctx, id)
}

// ModelWatcherStop mocks base method.
func (m *MockAPI) ModelWatcherStop(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelWatcherStop", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModelWatcherStop indicates an expected call of ModelWatcherStop.
func (mr *MockAPIMockRecorder) ModelWatcherStop(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelWatcherStop", reflect.TypeOf((*MockAPI)(nil).ModelWatcherStop), ctx, id)
}

// Offer mocks base method.
func (m *MockAPI) Offer(arg0 context.Context, arg1 crossmodel.OfferURL, arg2 params.AddApplicationOffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Offer indicates an expected call of Offer.
func (mr *MockAPIMockRecorder) Offer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offer", reflect.TypeOf((*MockAPI)(nil).Offer), arg0, arg1, arg2)
}

// Ping mocks base method.
func (m *MockAPI) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockAPIMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAPI)(nil).Ping), arg0)
}

// RemoveCloud mocks base method.
func (m *MockAPI) RemoveCloud(arg0 context.Context, arg1 v4.CloudTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCloud", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCloud indicates an expected call of RemoveCloud.
func (mr *MockAPIMockRecorder) RemoveCloud(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCloud", reflect.TypeOf((*MockAPI)(nil).RemoveCloud), arg0, arg1)
}

// RevokeApplicationOfferAccess mocks base method.
func (m *MockAPI) RevokeApplicationOfferAccess(arg0 context.Context, arg1 string, arg2 v4.UserTag, arg3 params.OfferAccessPermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeApplicationOfferAccess", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeApplicationOfferAccess indicates an expected call of RevokeApplicationOfferAccess.
func (mr *MockAPIMockRecorder) RevokeApplicationOfferAccess(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeApplicationOfferAccess", reflect.TypeOf((*MockAPI)(nil).RevokeApplicationOfferAccess), arg0, arg1, arg2, arg3)
}

// RevokeCloudAccess mocks base method.
func (m *MockAPI) RevokeCloudAccess(arg0 context.Context, arg1 v4.CloudTag, arg2 v4.UserTag, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeCloudAccess", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeCloudAccess indicates an expected call of RevokeCloudAccess.
func (mr *MockAPIMockRecorder) RevokeCloudAccess(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeCloudAccess", reflect.TypeOf((*MockAPI)(nil).RevokeCloudAccess), arg0, arg1, arg2, arg3)
}

// RevokeCredential mocks base method.
func (m *MockAPI) RevokeCredential(arg0 context.Context, arg1 v4.CloudCredentialTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeCredential", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeCredential indicates an expected call of RevokeCredential.
func (mr *MockAPIMockRecorder) RevokeCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeCredential", reflect.TypeOf((*MockAPI)(nil).RevokeCredential), arg0, arg1)
}

// RevokeModelAccess mocks base method.
func (m *MockAPI) RevokeModelAccess(arg0 context.Context, arg1 v4.ModelTag, arg2 v4.UserTag, arg3 params.UserAccessPermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeModelAccess", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeModelAccess indicates an expected call of RevokeModelAccess.
func (mr *MockAPIMockRecorder) RevokeModelAccess(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeModelAccess", reflect.TypeOf((*MockAPI)(nil).RevokeModelAccess), arg0, arg1, arg2, arg3)
}

// Status mocks base method.
func (m *MockAPI) Status(ctx context.Context, patterns []string) (*params.FullStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx, patterns)
	ret0, _ := ret[0].(*params.FullStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockAPIMockRecorder) Status(ctx, patterns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAPI)(nil).Status), ctx, patterns)
}

// SupportsCheckCredentialModels mocks base method.
func (m *MockAPI) SupportsCheckCredentialModels() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsCheckCredentialModels")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsCheckCredentialModels indicates an expected call of SupportsCheckCredentialModels.
func (mr *MockAPIMockRecorder) SupportsCheckCredentialModels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsCheckCredentialModels", reflect.TypeOf((*MockAPI)(nil).SupportsCheckCredentialModels))
}

// SupportsModelSummaryWatcher mocks base method.
func (m *MockAPI) SupportsModelSummaryWatcher() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsModelSummaryWatcher")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsModelSummaryWatcher indicates an expected call of SupportsModelSummaryWatcher.
func (mr *MockAPIMockRecorder) SupportsModelSummaryWatcher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsModelSummaryWatcher", reflect.TypeOf((*MockAPI)(nil).SupportsModelSummaryWatcher))
}

// UpdateCloud mocks base method.
func (m *MockAPI) UpdateCloud(arg0 context.Context, arg1 v4.CloudTag, arg2 params.Cloud) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloud", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloud indicates an expected call of UpdateCloud.
func (mr *MockAPIMockRecorder) UpdateCloud(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloud", reflect.TypeOf((*MockAPI)(nil).UpdateCloud), arg0, arg1, arg2)
}

// UpdateCredential mocks base method.
func (m *MockAPI) UpdateCredential(arg0 context.Context, arg1 params.TaggedCredential) ([]params.UpdateCredentialModelResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredential", arg0, arg1)
	ret0, _ := ret[0].([]params.UpdateCredentialModelResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCredential indicates an expected call of UpdateCredential.
func (mr *MockAPIMockRecorder) UpdateCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredential", reflect.TypeOf((*MockAPI)(nil).UpdateCredential), arg0, arg1)
}

// ValidateModelUpgrade mocks base method.
func (m *MockAPI) ValidateModelUpgrade(arg0 context.Context, arg1 v4.ModelTag, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateModelUpgrade", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateModelUpgrade indicates an expected call of ValidateModelUpgrade.
func (mr *MockAPIMockRecorder) ValidateModelUpgrade(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateModelUpgrade", reflect.TypeOf((*MockAPI)(nil).ValidateModelUpgrade), arg0, arg1, arg2)
}

// WatchAll mocks base method.
func (m *MockAPI) WatchAll(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAll", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAll indicates an expected call of WatchAll.
func (mr *MockAPIMockRecorder) WatchAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAll", reflect.TypeOf((*MockAPI)(nil).WatchAll), arg0)
}

// WatchAllModelSummaries mocks base method.
func (m *MockAPI) WatchAllModelSummaries(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAllModelSummaries", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAllModelSummaries indicates an expected call of WatchAllModelSummaries.
func (mr *MockAPIMockRecorder) WatchAllModelSummaries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAllModelSummaries", reflect.TypeOf((*MockAPI)(nil).WatchAllModelSummaries), arg0)
}

// WatchAllModels mocks base method.
func (m *MockAPI) WatchAllModels(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAllModels", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAllModels indicates an expected call of WatchAllModels.
func (mr *MockAPIMockRecorder) WatchAllModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAllModels", reflect.TypeOf((*MockAPI)(nil).WatchAllModels), arg0)
}
